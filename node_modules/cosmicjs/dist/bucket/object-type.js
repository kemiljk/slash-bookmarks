"use strict";

var _require = require('../helpers/constants'),
    URI = _require.URI;

var HTTP_METHODS = require('../helpers/http_methods');

var _require2 = require('../helpers/request_handler'),
    requestHandler = _require2.requestHandler;

var headers;

var objectTypeMethods = function objectTypeMethods(bucket_config) {
  return {
    getObjectTypes: function getObjectTypes(params) {
      var endpoint = "".concat(URI, "/buckets/").concat(bucket_config.slug, "/object-types?read_key=").concat(bucket_config.read_key);
      return requestHandler(HTTP_METHODS.GET, endpoint);
    },
    getObjectType: function getObjectType(params) {
      var endpoint = "".concat(URI, "/buckets/").concat(bucket_config.slug, "/object-types/").concat(params.slug, "?read_key=").concat(bucket_config.read_key);
      return requestHandler(HTTP_METHODS.GET, endpoint);
    },
    addObjectType: function addObjectType(params) {
      var endpoint = "".concat(URI, "/buckets/").concat(bucket_config.slug, "/object-types");

      if (bucket_config.write_key) {
        headers = {
          "Authorization": "Bearer ".concat(bucket_config.write_key)
        };
      }

      return requestHandler(HTTP_METHODS.POST, endpoint, params, headers);
    },
    editObjectType: function editObjectType(params) {
      var endpoint = "".concat(URI, "/buckets/").concat(bucket_config.slug, "/object-types/").concat(params.slug);

      if (bucket_config.write_key) {
        headers = {
          "Authorization": "Bearer ".concat(bucket_config.write_key)
        };
      } // Remove slug


      delete params.slug;
      return requestHandler(HTTP_METHODS.PATCH, endpoint, params, headers);
    },
    deleteObjectType: function deleteObjectType(params) {
      var endpoint = "".concat(URI, "/buckets/").concat(bucket_config.slug, "/object-types/").concat(params.slug);

      if (bucket_config.write_key) {
        headers = {
          "Authorization": "Bearer ".concat(bucket_config.write_key)
        };
      }

      return requestHandler(HTTP_METHODS.DELETE, endpoint, null, headers);
    }
  };
};

module.exports = objectTypeMethods;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9idWNrZXQvb2JqZWN0LXR5cGUuanMiXSwibmFtZXMiOlsicmVxdWlyZSIsIlVSSSIsIkhUVFBfTUVUSE9EUyIsInJlcXVlc3RIYW5kbGVyIiwiaGVhZGVycyIsIm9iamVjdFR5cGVNZXRob2RzIiwiYnVja2V0X2NvbmZpZyIsImdldE9iamVjdFR5cGVzIiwicGFyYW1zIiwiZW5kcG9pbnQiLCJzbHVnIiwicmVhZF9rZXkiLCJHRVQiLCJnZXRPYmplY3RUeXBlIiwiYWRkT2JqZWN0VHlwZSIsIndyaXRlX2tleSIsIlBPU1QiLCJlZGl0T2JqZWN0VHlwZSIsIlBBVENIIiwiZGVsZXRlT2JqZWN0VHlwZSIsIkRFTEVURSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O2VBQWdCQSxPQUFPLENBQUMsc0JBQUQsQztJQUFmQyxHLFlBQUFBLEc7O0FBQ1IsSUFBTUMsWUFBWSxHQUFHRixPQUFPLENBQUMseUJBQUQsQ0FBNUI7O2dCQUMyQkEsT0FBTyxDQUFDLDRCQUFELEM7SUFBMUJHLGMsYUFBQUEsYzs7QUFDUixJQUFJQyxPQUFKOztBQUNBLElBQU1DLGlCQUFpQixHQUFHLFNBQXBCQSxpQkFBb0IsQ0FBQ0MsYUFBRDtBQUFBLFNBQW9CO0FBQzVDQyxJQUFBQSxjQUFjLEVBQUUsd0JBQUNDLE1BQUQsRUFBWTtBQUMxQixVQUFJQyxRQUFRLGFBQU1SLEdBQU4sc0JBQXFCSyxhQUFhLENBQUNJLElBQW5DLG9DQUFpRUosYUFBYSxDQUFDSyxRQUEvRSxDQUFaO0FBQ0EsYUFBT1IsY0FBYyxDQUFDRCxZQUFZLENBQUNVLEdBQWQsRUFBbUJILFFBQW5CLENBQXJCO0FBQ0QsS0FKMkM7QUFLNUNJLElBQUFBLGFBQWEsRUFBRSx1QkFBQ0wsTUFBRCxFQUFZO0FBQ3pCLFVBQUlDLFFBQVEsYUFBTVIsR0FBTixzQkFBcUJLLGFBQWEsQ0FBQ0ksSUFBbkMsMkJBQXdERixNQUFNLENBQUNFLElBQS9ELHVCQUFnRkosYUFBYSxDQUFDSyxRQUE5RixDQUFaO0FBQ0EsYUFBT1IsY0FBYyxDQUFDRCxZQUFZLENBQUNVLEdBQWQsRUFBbUJILFFBQW5CLENBQXJCO0FBQ0QsS0FSMkM7QUFTNUNLLElBQUFBLGFBQWEsRUFBRSx1QkFBQ04sTUFBRCxFQUFZO0FBQ3pCLFVBQU1DLFFBQVEsYUFBTVIsR0FBTixzQkFBcUJLLGFBQWEsQ0FBQ0ksSUFBbkMsa0JBQWQ7O0FBQ0EsVUFBSUosYUFBYSxDQUFDUyxTQUFsQixFQUE2QjtBQUMzQlgsUUFBQUEsT0FBTyxHQUFHO0FBQ1IsNENBQTJCRSxhQUFhLENBQUNTLFNBQXpDO0FBRFEsU0FBVjtBQUdEOztBQUNELGFBQU9aLGNBQWMsQ0FBQ0QsWUFBWSxDQUFDYyxJQUFkLEVBQW9CUCxRQUFwQixFQUE4QkQsTUFBOUIsRUFBc0NKLE9BQXRDLENBQXJCO0FBQ0QsS0FqQjJDO0FBa0I1Q2EsSUFBQUEsY0FBYyxFQUFFLHdCQUFDVCxNQUFELEVBQVk7QUFDMUIsVUFBTUMsUUFBUSxhQUFNUixHQUFOLHNCQUFxQkssYUFBYSxDQUFDSSxJQUFuQywyQkFBd0RGLE1BQU0sQ0FBQ0UsSUFBL0QsQ0FBZDs7QUFDQSxVQUFJSixhQUFhLENBQUNTLFNBQWxCLEVBQTZCO0FBQzNCWCxRQUFBQSxPQUFPLEdBQUc7QUFDUiw0Q0FBMkJFLGFBQWEsQ0FBQ1MsU0FBekM7QUFEUSxTQUFWO0FBR0QsT0FOeUIsQ0FPMUI7OztBQUNBLGFBQU9QLE1BQU0sQ0FBQ0UsSUFBZDtBQUNBLGFBQU9QLGNBQWMsQ0FBQ0QsWUFBWSxDQUFDZ0IsS0FBZCxFQUFxQlQsUUFBckIsRUFBK0JELE1BQS9CLEVBQXVDSixPQUF2QyxDQUFyQjtBQUNELEtBNUIyQztBQTZCNUNlLElBQUFBLGdCQUFnQixFQUFFLDBCQUFDWCxNQUFELEVBQVk7QUFDNUIsVUFBTUMsUUFBUSxhQUFNUixHQUFOLHNCQUFxQkssYUFBYSxDQUFDSSxJQUFuQywyQkFBd0RGLE1BQU0sQ0FBQ0UsSUFBL0QsQ0FBZDs7QUFDQSxVQUFJSixhQUFhLENBQUNTLFNBQWxCLEVBQTZCO0FBQzNCWCxRQUFBQSxPQUFPLEdBQUc7QUFDUiw0Q0FBMkJFLGFBQWEsQ0FBQ1MsU0FBekM7QUFEUSxTQUFWO0FBR0Q7O0FBQ0QsYUFBT1osY0FBYyxDQUFDRCxZQUFZLENBQUNrQixNQUFkLEVBQXNCWCxRQUF0QixFQUFnQyxJQUFoQyxFQUFzQ0wsT0FBdEMsQ0FBckI7QUFDRDtBQXJDMkMsR0FBcEI7QUFBQSxDQUExQjs7QUF3Q0FpQixNQUFNLENBQUNDLE9BQVAsR0FBaUJqQixpQkFBakIiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7IFVSSSB9ID0gcmVxdWlyZSgnLi4vaGVscGVycy9jb25zdGFudHMnKVxuY29uc3QgSFRUUF9NRVRIT0RTID0gcmVxdWlyZSgnLi4vaGVscGVycy9odHRwX21ldGhvZHMnKVxuY29uc3QgeyByZXF1ZXN0SGFuZGxlciB9ID0gcmVxdWlyZSgnLi4vaGVscGVycy9yZXF1ZXN0X2hhbmRsZXInKVxubGV0IGhlYWRlcnM7XG5jb25zdCBvYmplY3RUeXBlTWV0aG9kcyA9IChidWNrZXRfY29uZmlnKSA9PiAoe1xuICBnZXRPYmplY3RUeXBlczogKHBhcmFtcykgPT4ge1xuICAgIGxldCBlbmRwb2ludCA9IGAke1VSSX0vYnVja2V0cy8ke2J1Y2tldF9jb25maWcuc2x1Z30vb2JqZWN0LXR5cGVzP3JlYWRfa2V5PSR7YnVja2V0X2NvbmZpZy5yZWFkX2tleX1gXG4gICAgcmV0dXJuIHJlcXVlc3RIYW5kbGVyKEhUVFBfTUVUSE9EUy5HRVQsIGVuZHBvaW50KVxuICB9LFxuICBnZXRPYmplY3RUeXBlOiAocGFyYW1zKSA9PiB7XG4gICAgbGV0IGVuZHBvaW50ID0gYCR7VVJJfS9idWNrZXRzLyR7YnVja2V0X2NvbmZpZy5zbHVnfS9vYmplY3QtdHlwZXMvJHtwYXJhbXMuc2x1Z30/cmVhZF9rZXk9JHtidWNrZXRfY29uZmlnLnJlYWRfa2V5fWBcbiAgICByZXR1cm4gcmVxdWVzdEhhbmRsZXIoSFRUUF9NRVRIT0RTLkdFVCwgZW5kcG9pbnQpXG4gIH0sXG4gIGFkZE9iamVjdFR5cGU6IChwYXJhbXMpID0+IHtcbiAgICBjb25zdCBlbmRwb2ludCA9IGAke1VSSX0vYnVja2V0cy8ke2J1Y2tldF9jb25maWcuc2x1Z30vb2JqZWN0LXR5cGVzYFxuICAgIGlmIChidWNrZXRfY29uZmlnLndyaXRlX2tleSkge1xuICAgICAgaGVhZGVycyA9IHtcbiAgICAgICAgXCJBdXRob3JpemF0aW9uXCI6IGBCZWFyZXIgJHtidWNrZXRfY29uZmlnLndyaXRlX2tleX1gXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXF1ZXN0SGFuZGxlcihIVFRQX01FVEhPRFMuUE9TVCwgZW5kcG9pbnQsIHBhcmFtcywgaGVhZGVycylcbiAgfSxcbiAgZWRpdE9iamVjdFR5cGU6IChwYXJhbXMpID0+IHtcbiAgICBjb25zdCBlbmRwb2ludCA9IGAke1VSSX0vYnVja2V0cy8ke2J1Y2tldF9jb25maWcuc2x1Z30vb2JqZWN0LXR5cGVzLyR7cGFyYW1zLnNsdWd9YFxuICAgIGlmIChidWNrZXRfY29uZmlnLndyaXRlX2tleSkge1xuICAgICAgaGVhZGVycyA9IHtcbiAgICAgICAgXCJBdXRob3JpemF0aW9uXCI6IGBCZWFyZXIgJHtidWNrZXRfY29uZmlnLndyaXRlX2tleX1gXG4gICAgICB9XG4gICAgfVxuICAgIC8vIFJlbW92ZSBzbHVnXG4gICAgZGVsZXRlIHBhcmFtcy5zbHVnO1xuICAgIHJldHVybiByZXF1ZXN0SGFuZGxlcihIVFRQX01FVEhPRFMuUEFUQ0gsIGVuZHBvaW50LCBwYXJhbXMsIGhlYWRlcnMpXG4gIH0sXG4gIGRlbGV0ZU9iamVjdFR5cGU6IChwYXJhbXMpID0+IHtcbiAgICBjb25zdCBlbmRwb2ludCA9IGAke1VSSX0vYnVja2V0cy8ke2J1Y2tldF9jb25maWcuc2x1Z30vb2JqZWN0LXR5cGVzLyR7cGFyYW1zLnNsdWd9YFxuICAgIGlmIChidWNrZXRfY29uZmlnLndyaXRlX2tleSkge1xuICAgICAgaGVhZGVycyA9IHtcbiAgICAgICAgXCJBdXRob3JpemF0aW9uXCI6IGBCZWFyZXIgJHtidWNrZXRfY29uZmlnLndyaXRlX2tleX1gXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXF1ZXN0SGFuZGxlcihIVFRQX01FVEhPRFMuREVMRVRFLCBlbmRwb2ludCwgbnVsbCwgaGVhZGVycylcbiAgfVxufSlcblxubW9kdWxlLmV4cG9ydHMgPSBvYmplY3RUeXBlTWV0aG9kc1xuIl19